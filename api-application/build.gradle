apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.cloud.tools.jib'

ext {
    set('springCloudVersion', '2020.0.2')
    set('uomVersion', '2.0.2')
    set('caffeineVersion', '3.0.1')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

jib {
    from.image = fromImage
    to.image = "${imageRoot}/vs-api"
    container {
        ports ['8080']
    }
}

dependencies {
    implementation project(':common')

    // Core
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation group: 'io.projectreactor', name: 'reactor-core', version: '3.4.6'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Streaming
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'

    // Data
    implementation 'com.vladmihalcea:hibernate-types-52:2.10.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    implementation 'org.liquibase:liquibase-core'
    annotationProcessor 'org.hibernate:hibernate-jpamodelgen'
    runtimeOnly 'org.postgresql:postgresql'

    // Spatial data
    implementation 'de.grundid.opendatalab:geojson-jackson:1.14'
    implementation 'org.hibernate:hibernate-spatial'
    implementation 'com.uber:h3:3.7.0'
    implementation 'net.sf.geographiclib:GeographicLib-Java:1.51'

    // Unit conversion
    implementation 'tech.units:indriya:2.1.2'
    implementation "systems.uom:systems-common:${uomVersion}"
    implementation "systems.uom:systems-unicode:${uomVersion}"
    implementation "systems.uom:systems-quantity:${uomVersion}"

    // FHIR
    implementation "ca.uhn.hapi.fhir:hapi-fhir-spring-boot-starter:${hapiVersion}"
    implementation "ca.uhn.hapi.fhir:hapi-fhir-jaxrsserver-base:${hapiVersion}"
    implementation "ca.uhn.hapi.fhir:hapi-fhir-structures-r4:${hapiVersion}"
    implementation "ca.uhn.hapi.fhir:hapi-fhir-validation:${hapiVersion}"
    implementation "ca.uhn.hapi.fhir:hapi-fhir-validation-resources-r4:${hapiVersion}"

    // Logging
    implementation 'net.logstash.logback:logstash-logback-encoder:6.6'
    implementation 'biz.paluch.logging:logstash-gelf:1.14.1'
    implementation 'ch.qos.logback:logback-classic'

    // Formatting
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.4'

    // Deployment
    implementation 'com.rollbar:rollbar-spring-boot-webmvc:1.7.6'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.giffing.bucket4j.spring.boot.starter:bucket4j-spring-boot-starter:0.4.0'
    implementation 'javax.cache:cache-api'
    implementation "com.github.ben-manes.caffeine:caffeine:${caffeineVersion}"
    implementation "com.github.ben-manes.caffeine:jcache:${caffeineVersion}"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation('org.springframework.cloud:spring-cloud-stream') {
        artifact {
            name = 'spring-cloud-stream'
            extension = 'jar'
            type = 'test-jar'
            classifier = 'test-binder'
        }
    }
    // This version needs to track the one provided by HAPI.
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.8.1'
}

configurations {
    // exclude Tomcat
    compile.exclude module: 'spring-boot-starter-tomcat'
}

processResources {
    from("$rootDir/examples")
    from("$rootDir/resources")
}

springBoot {
    buildInfo()
}
